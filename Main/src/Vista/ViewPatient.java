/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.Data;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author ikerf
 */
public class ViewPatient extends javax.swing.JFrame {

    /**
     * Creates new form ViewPatient
     */
    Data db;
    Main main;
    boolean activate ;
    double average_revenue;
    int size = 400;
    public ViewPatient() {
        initComponents();
        db = new Data();
        main = new Main();
        activate = false;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patients = new javax.swing.JTable();
        Regresar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        View = new javax.swing.JButton();
        choice = new javax.swing.JComboBox<>();
        Data = new javax.swing.JButton();
        Metric = new javax.swing.JComboBox<>();
        control = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        patients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Género", "Diagnóstico", "Cumpleaños", "Email", "Modalidad", "RFC", "Estado", "Costo"
            }
        ));
        jScrollPane1.setViewportView(patients);

        Regresar.setText("Regresar");
        Regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegresarMouseClicked(evt);
            }
        });
        Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegresarActionPerformed(evt);
            }
        });

        jLabel1.setText("Pacientes Registrados");

        View.setText("Ver ");
        View.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ViewMouseClicked(evt);
            }
        });
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });

        choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Activo", "Inactivo" }));
        choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choiceActionPerformed(evt);
            }
        });

        Data.setText("Ver Estadísticas");
        Data.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataMouseClicked(evt);
            }
        });
        Data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataActionPerformed(evt);
            }
        });

        Metric.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo e Inactivo", "Costo", "Modalidad", "RFC" }));
        Metric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetricActionPerformed(evt);
            }
        });

        control.setForeground(new java.awt.Color(255, 51, 51));
        control.setText("Desactivado");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Regresar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(jLabel1)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(View, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(control)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Data)
                        .addGap(18, 18, 18)
                        .addComponent(Metric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(View)
                    .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Data)
                    .addComponent(Metric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(control))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addComponent(Regresar)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegresarMouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_RegresarMouseClicked

    private void ViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ViewMouseClicked
        // TODO add your handling code here:
        db.Connect();
        activate = true;
        control.setText("Activado: ");
        control.setForeground(Color.black);
        if(String.valueOf(choice.getItemAt(choice.getSelectedIndex())).equals("Todos")){
            db.View_patient(patients);
        }
        else{
            db.View_patient_status(patients, String.valueOf(choice.getItemAt(choice.getSelectedIndex()))); 
        }
        
        
    }//GEN-LAST:event_ViewMouseClicked

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ViewActionPerformed

    private void choiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_choiceActionPerformed

    private void RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegresarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RegresarActionPerformed

    private void DataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataMouseClicked
        // TODO add your handling code here:
        db.Connect();
        if(activate){
            switch(Metric.getSelectedIndex()){
                case 0:
                    Status();
                    break;
                case 1:
                    cost();
                    break;
                case 2:
                    Modality();
                    break;
                case 3:
                    RFC_Status();
                    break;
        }
        }
    }//GEN-LAST:event_DataMouseClicked

    private void MetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetricActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MetricActionPerformed

    private void DataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DataActionPerformed

    private void Status(){
        int active = 0;
        for(int i = 0; i<Integer.parseInt(db.total_patients());i++){
            if(String.valueOf(patients.getValueAt(i, 7)).equals("Activo")){
                active++;
            }
        }
        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("Activo", (100*active)/Integer.parseInt(db.total_patients()));
        data.setValue("Inactivo", 100-(100*active)/Integer.parseInt(db.total_patients()));
        JFreeChart patient_chart = ChartFactory.createPieChart("Porcentaje de pacientes", data,true,true,false);
        ChartFrame frame = new ChartFrame("stats",patient_chart);
        frame.setSize(size,size);
        frame.setVisible(true);
    }
    public void cost(){
        int count = 0;
        average_revenue = 0;
        ArrayList<Integer> costs = new ArrayList<>();
        ArrayList<Integer> matches = new ArrayList<>();
        costs.add(Integer.parseInt((String) patients.getValueAt(0, 8)));
        for(int i = 1; i<Integer.parseInt(db.total_patients());i++){
            for(int j = 0; i<costs.size();j++){
                if(Integer.parseInt((String) patients.getValueAt(i, 8))==costs.get(j)){
                    count++;
                }
            }
            if(count==0){
                costs.add(Integer.parseInt((String) patients.getValueAt(i, 8))); 
            }
            count = 0;
        }
        for(int i = 0; i<costs.size();i++){
            int match = 0;
            for(int j = 0; j<Integer.parseInt(db.total_patients());j++){
                if(costs.get(i)==Integer.parseInt((String) patients.getValueAt(j, 8))){
                    match++;
                }
                average_revenue += costs.get(j);
            }
            matches.add(match);
        }
        average_revenue /= costs.size();
        DefaultPieDataset data = new DefaultPieDataset();
        for(int i = 0; i<costs.size();i++){
            data.setValue("$"+String.valueOf(costs.get(i)),(matches.get(i)*100/Integer.parseInt(db.total_patients())));
        }
        JFreeChart patient_chart = ChartFactory.createPieChart("Diferentes costos", data,true,true,false);
        ChartFrame frame = new ChartFrame("stats",patient_chart);
        frame.setSize(size,size);
        frame.setVisible(true);
    }
    private void Modality(){
        int modality = 0;
        for(int i = 0; i<Integer.parseInt(db.total_patients());i++){
            if(String.valueOf(patients.getValueAt(i, 5)).equals("Presencial")){
                modality++;
            }
        }
        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("Presencial", (100*modality)/Integer.parseInt(db.total_patients()));
        data.setValue("Remoto", 100-(100*modality)/Integer.parseInt(db.total_patients()));
        JFreeChart patient_chart = ChartFactory.createPieChart("Remoto/Presencial", data,true,true,false);
        ChartFrame frame = new ChartFrame("stats",patient_chart);
        frame.setSize(size,size);
        frame.setVisible(true);
    }
    private void RFC_Status(){
        int RFC = 0;
        for(int i = 0; i<Integer.parseInt(db.total_patients());i++){
            if(String.valueOf(patients.getValueAt(i, 6)).equals("NO")){
                RFC++;
            }
        }
        DefaultPieDataset data = new DefaultPieDataset();
        data.setValue("NO", (100*RFC)/Integer.parseInt(db.total_patients()));
        data.setValue("SÍ", 100-(100*RFC)/Integer.parseInt(db.total_patients()));
        
        JFreeChart patient_chart = ChartFactory.createPieChart("Porcentaje de pacientes con RFC", data,true,true,false);
        ChartFrame frame = new ChartFrame("stats",patient_chart);
        frame.setSize(size,size);
        frame.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */

    public double getAverage_revenue() {
        return average_revenue;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Data;
    private javax.swing.JComboBox<String> Metric;
    private javax.swing.JButton Regresar;
    private javax.swing.JButton View;
    private javax.swing.JComboBox<String> choice;
    private javax.swing.JLabel control;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patients;
    // End of variables declaration//GEN-END:variables
}
